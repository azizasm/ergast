<?xml version="1.0" encoding="UTF-8" ?>
<Module>
<ModulePrefs author="Ergast" author_affiliation="ergast.com" author_email="ergast.com+nospam@googlemail.com" description="Latest Formula One standings and results. Click on the horizontal arrows for previous F1 races and seasons. Click on the vertical arrows to page through results." height="250" screenshot="http://ergast.googlecode.com/svn/trunk/gadget/280x260.png" thumbnail="http://ergast.googlecode.com/svn/trunk/gadget/120x60.png" title="F1 Standings &amp; Results" title_url="http://ergast.com/mrd/gallery#gadget">
  <Require feature="tabs" />
  <Require feature="dynamic-height" />
</ModulePrefs>

<UserPref datatype="enum" default_value="Driver Standings" display_name="Initial tab" name="initialTab">
  <EnumValue value="Driver Standings" />
  <EnumValue value="Constructor Standings" />
  <EnumValue value="Race Results" />
</UserPref>

<UserPref datatype="enum" default_value="8" display_name="Results per page" name="limit">
  <EnumValue value="3" />
  <EnumValue value="4" />
  <EnumValue value="5" />
  <EnumValue value="6" />
  <EnumValue value="8" />
  <EnumValue value="10" />
  <EnumValue value="12" />
  <EnumValue value="15" />
  <EnumValue value="20" />
  <EnumValue display_value="All" value="99" />
</UserPref>

<Content type="html">
<![CDATA[
<style type="text/css">
  .selector { font-size: 13px; text-align: center; margin-bottom: 2px; width: 100%}
  .footer { font-size: 12px; margin: 0; text-align: center; width: 100%}
  .race { font-size: 14px; font-weight: bold }
  .round { font-size: 13px; }
  .season { font-size: 13px; }
  .list { font-size: 12px; padding: 1px 1px 1px 1px;  border-width: 0 1px 1px 1px; border-style: solid; border-color: #676767 }
  .list td { padding: 0 5px 0 5px }
  .head { background-color: #d8d8d8 }
  .odd { background-color: #f4f4f4 }
  .even { background-color: #d3d3e8 }
  .centred { text-align: center }
  a:link { text-decoration: none; cursor:pointer }
  a:visited { text-decoration: none }
  a:hover { text-decoration: underline }

  .tablib_table {
    width: 100%;
    border-collapse: separate;
    border-spacing: 0px;
    empty-cells: show;
    font-size: 12px;
    text-align: center;
  }

  .tablib_selected {
    padding: 2px 0px;
    background-color: #ffffff;
    border: 1px solid #676767;
    border-bottom-width: 0px;
    color: #000000;
    font-weight: bold;
    width: auto;
    cursor: default;
  }

  .tablib_unselected {
    padding: 2px 0px;
    background-color: #ffffff;
    border: 1px solid #aaaaaa;
    border-bottom-color: #676767;
    color: #aaaaaa;
    width: auto;
    cursor: pointer;
  }
</style>

<script type="text/javascript">
  var root = "http://ergast.com/api/f1/";
  var prefs = new gadgets.Prefs();
  var offset = 0;
  var limit;
  var tabs;
  var selectedTab;
  var selectedTabId;
  var firstYear = 1950;
  var currentYear;
  var numRounds = new Array();
  var lastRounds = new Array();
  var schedules = new Array();
  var nextRace;
  var allDS = new Array();
  var allCS = new Array();
  var allRR = new Array();
  var year;
  var round;
  var params = {};
  params[gadgets.io.RequestParameters.CONTENT_TYPE] = gadgets.io.ContentType.JSON;
  gadgets.util.registerOnLoadHandler(init);

  function init() {
    year = "current";
    round = "last";
    limit = prefs.getInt("limit");
    tabs = new gadgets.TabSet(__MODULE_ID__, prefs.getString("initialTab"), document.getElementById("tabs"));
    tabs.addTab("Driver Standings", {
      contentContainer: document.getElementById("dsTabId"),
      callback: driverStandings
    });
    tabs.addTab("Constructor Standings", {
      contentContainer: document.getElementById("csTabId"),
      callback: constructorStandings
    });
    tabs.addTab("Race Results", {
      contentContainer: document.getElementById("rrTabId"),
      callback: raceResults
    });
    getNext();
  }
  
  function driverStandings(tabId) {
    selectedTab = 0;
    selectedTabId = tabId;
    offset = 0;
    redraw();
  }

  function constructorStandings(tabId) {
    selectedTab = 1;
    selectedTabId = tabId;
    offset = 0;
    redraw();
  }
  
  function raceResults(tabId) {
    selectedTab = 2;
    selectedTabId = tabId;
    offset = 0;
    redraw();
  }

  function redraw() {
    getSelector();
    switch(selectedTab) {
      case 0:
        getDriverStandings(year, round);
        break;
      case 1:
        getConstructorStandings(year, round);
        break; 
      case 2:
        getRaceResults(year, round);
        break;
      default:
        getDriverStandings(year, round);
    }
  }

  function getDriverStandings(year, round) {
    if(year != "current" && round != "last") {
      var yearDS = allDS[year];
      if(yearDS != null) {
        standingsList = yearDS[round];
        if(standingsList != null) {
          drawDriverStandings(year, round);
          return;
        }
      }
    }
    showLoading();
    var request = root + year + "/" + round + "/driverStandings.json";
    if(round == "last") {
      gadgets.io.makeRequest(request, parseLastDriverStandings, params);
    } else {
      gadgets.io.makeRequest(request, parseDriverStandings, params);
    }
  }
  
  function getConstructorStandings(year, round) {
    if(year != "current" && round != "last") {
      var yearCS = allCS[year];
      if(yearCS != null) {
        standingsList = yearCS[round];
        if(standingsList != null) {
          drawConstructorStandings(year, round);
          return;
        }
      }
    }
    showLoading();
    var request = root + year + "/" + round + "/constructorStandings.json";
    if(round == "last") {
      gadgets.io.makeRequest(request, parseLastConstructorStandings, params);
    } else {
      gadgets.io.makeRequest(request, parseConstructorStandings, params);
    }
  }
  
  function getRaceResults(year, round) {
    if(year != "current" && round != "last") {
      var yearRR = allRR[year];
      if(yearRR != null) {
        standingsList = yearRR[round];
        if(standingsList != null) {
          drawRaceResults(year, round);
          return;
        }
      }
    }
    showLoading();
    var request = root + year + "/" + round + "/results.json";
    if(round == "last") {
      gadgets.io.makeRequest(request, parseLastRaceResults, params);
    } else {
      gadgets.io.makeRequest(request, parseRaceResults, params);
    }
  }
  
  function getSelector() {
	  document.getElementById("selector").innerHTML = "1.";
    if(year == "current") {
	     document.getElementById("selector").innerHTML = "2.";
      var request = root + "current.json";
      gadgets.io.makeRequest(request, parseCurrentSchedule, params);
    } else {
	     document.getElementById("selector").innerHTML = "3.";
      if(round == "last" && lastRounds[year] != null) round = lastRounds[year];
      var races = schedules[year];
      if(races != null && round != null) {
        var races = schedules[year];
        drawSelector(year, round);
	return;
      }
	 document.getElementById("selector").innerHTML = "4.";
      var request = root + year + ".json";
      gadgets.io.makeRequest(request, parseSchedule, params);
    }
  }
  
  function getNext() {
    var request = root + "current/next.json";
    gadgets.io.makeRequest(request, parseNext, params);
  }
  
  function parseLastDriverStandings(json) {
    if(json.data == null) {
      document.getElementById(selectedTabId).innerHTML = "<i>Data unavailable.</i>";
    } else {
      var standingsList = json.data.MRData.StandingsTable.StandingsLists[0];
      if(year == "current") {
        currentYear = standingsList.season;
	year = standingsList.season;
      }
      if(year == standingsList.season && round == "last") round = standingsList.round;
      lastRounds[standingsList.season] = standingsList.round;
      var yearDS = allDS[standingsList.season];
      if(yearDS == null) yearDS = new Array();
      yearDS[standingsList.round] = standingsList;
      allDS[standingsList.season] = yearDS;
      drawDriverStandings(year, round);
    }
  }
  
  function parseDriverStandings(json) {
    if(json.data == null) {
      document.getElementById(selectedTabId).innerHTML = "<i>Data unavailable.</i>";
    } else {
      var standingsList = json.data.MRData.StandingsTable.StandingsLists[0];
      var yearDS = allDS[standingsList.season];
      if(yearDS == null) yearDS = new Array();
      yearDS[standingsList.round] = standingsList;
      allDS[standingsList.season] = yearDS;
      drawDriverStandings(year, round);
    }
  }
  
  function parseLastConstructorStandings(json) {
    if(json.data == null) {
      document.getElementById(selectedTabId).innerHTML = "<i>Data unavailable.</i>";
    } else {
      var standingsList = json.data.MRData.StandingsTable.StandingsLists[0];
      if(year == "current") {
        currentYear = standingsList.season;
	year = standingsList.season;
      }
      if(year == standingsList.season && round == "last") round = standingsList.round;
      lastRounds[standingsList.season] = standingsList.round;
      var yearCS = allCS[standingsList.season];
      if(yearCS == null) yearCS = new Array();
      yearCS[standingsList.round] = standingsList;
      allCS[standingsList.season] = yearCS;
      drawConstructorStandings(year, round);
    }
  }
  
  function parseConstructorStandings(json) {
    if(json.data == null) {
      document.getElementById(selectedTabId).innerHTML = "<i>Data unavailable.</i>";
    } else {
      var standingsList = json.data.MRData.StandingsTable.StandingsLists[0];
      var yearCS = allCS[standingsList.season];
      if(yearCS == null) yearCS = new Array();
      yearCS[standingsList.round] = standingsList;
      allCS[standingsList.season] = yearCS;
      drawConstructorStandings(year, round);
    }
  }
  
  function parseLastRaceResults(json) {
    if(json.data == null) {
      document.getElementById(selectedTabId).innerHTML = "<i>Data unavailable.</i>";
    } else {
      var race = json.data.MRData.RaceTable.Races[0];
      if(year == "current") {
        currentYear = standingsList.season;
	year = standingsList.season;
      }
      if(year == standingsList.season && round == "last") round = standingsList.round;
      lastRounds[race.season] = race.round;
      var yearRR = allRR[race.season];
      if(yearRR == null) yearRR = new Array();
      yearRR[race.round] = race;
      allRR[race.season] = yearRR;
      drawRaceResults(year, round);
    }
  }
  
  function parseRaceResults(json) {
    if(json.data == null) {
     document.getElementById(selectedTabId).innerHTML = "<i>Data unavailable.</i>";
    } else {
      var race = json.data.MRData.RaceTable.Races[0];
      var yearRR = allRR[race.season];
      if(yearRR == null) yearRR = new Array();
      yearRR[race.round] = race;
      allRR[race.season] = yearRR;
      drawRaceResults(year, round);
    }
  }

  function parseCurrentSchedule(json) {
    document.getElementById("selector").innerHTML = "5a.";
    if(json.data != null) {
        document.getElementById("selector").innerHTML = "6a.";
      year = json.data.MRData.RaceTable.season;
      currentYear = year;
      schedules[year] = json.data.MRData.RaceTable.Races;
      numRounds[year] = json.data.MRData.RaceTable.Races.length;
      drawSelector(year, round);
      switch(selectedTab) {
        case 0:
          drawDriverStandings(year, round);
          break;
        case 1:
          drawConstructorStandings(year, round);
          break; 
        case 2:
          drawRaceResults(year, round);
          break;
        default:
          drawDriverStandings(year, round);
      }
    }    else {
        document.getElementById("selector").innerHTML = "7a.";
    }
  }
  
  function parseSchedule(json) {
	   document.getElementById("selector").innerHTML = "5b." + json.data.MRData.RaceTable.season;
    if(json.data != null) {
	        document.getElementById("selector").innerHTML = "6b.";
      schedules[json.data.MRData.RaceTable.season] = json.data.MRData.RaceTable.Races;
      numRounds[json.data.MRData.RaceTable.season] = json.data.MRData.RaceTable.Races.length;
      drawSelector(year, round);
    }     else {
        document.getElementById("selector").innerHTML = "7b.";    
    }
  }
  
  function parseNext(json) {
    if(json.data != null) {
      nextRace = json.data.MRData.RaceTable.Races[0];
      drawNext();
    }
  }

  function drawDriverStandings(year, round) {
    var yearDS = allDS[year];
    if(yearDS != null) {
      standingsList = yearDS[round];
      if(standingsList != null) {
        // ?? drawSelector(year, round);
	  getSelector();
        var standings = standingsList.DriverStandings;
        var list = "<table class=\"list\" width=\"100%\"><tr class=\"head\"><th>Pos</th><th>Driver</th><th>Constructor</th><th>Pts</th><th>Wins</th></tr>";
        var line = "odd";
        var max = Math.min(offset + limit, standings.length);
        for(var i=offset; i<max; i++) {
          var position = standings[i].position;
          var driver = standings[i].Driver.givenName + " " + standings[i].Driver.familyName;
          var durl = standings[i].Driver.url;
          var constructors = standings[i].Constructors;
          var points = standings[i].points;
          var wins = standings[i].wins;
          list += "<tr class=\"" + line + "\"><td class=\"centred\">" + position + "</td><td><a href=\"" + durl + "\" target=\"_blank\">" + driver + "</a></td><td>";
          for(var j=0; j<constructors.length; j++) {
            var constructor = constructors[j].name;
            var curl = constructors[j].url;
            list += "<a href=\"" + curl + "\" target=\"_blank\">" + constructor + "</a>";
            if(j < constructors.length - 1) list += " / ";
          }
          list += "</td><td class=\"centred\">" + points + "</td><td class=\"centred\">" + wins + "</td></tr>";
          if(line == "odd") { line = "even"; } else { line = "odd"; }
        }
        list += "</table>";
        document.getElementById(selectedTabId).innerHTML = list;
        updateFooter(standings.length); 
      }    
    }
  }
 
  function drawConstructorStandings(year, round) {
    var yearCS = allCS[year];
    if(yearCS != null) {
      standingsList = yearCS[round];
      if(standingsList != null) {
        drawSelector(year, round);
        var standings = standingsList.ConstructorStandings;
        var list = "<table class=\"list\" width=\"100%\"><tr class=\"head\"><th>Pos</th><th>Constructor</th><th>Nationality</th><th>Pts</th><th>Wins</th></tr>";
        var line = "odd";
        var max = Math.min(offset + limit, standings.length);
        for(var i=offset; i<max; i++) {
          var position = standings[i].position;
          var constructor = standings[i].Constructor.name;
          var curl = standings[i].Constructor.url;
          var nationality = standings[i].Constructor.nationality;;
          var points = standings[i].points;
          var wins = standings[i].wins;
          list += "<tr class=\"" + line + "\"><td class=\"centred\">" + position + "</td><td><a href=\"" + curl + "\" target=\"_blank\">" + constructor + "</a></td><td>" + nationality + "</td><td class=\"centred\">" + points + "</td><td class=\"centred\">" + wins + "</td></tr>";
          if(line == "odd") { line = "even"; } else { line = "odd"; }
        }
        list += "</table>";
        document.getElementById(selectedTabId).innerHTML = list;
        updateFooter(standings.length); 
      }    
    }  
  }

  function drawRaceResults(year, round) {
    var yearRR = allRR[year];
    if(yearRR != null) {
      race = yearRR[round];
      if(race != null) {
        drawSelector(year, round);
        var results = race.Results;
        var list = "<table class=\"list\" width=\"100%\"><tr class=\"head\"><th>Pos</th><th>Driver</th><th>Constructor</th><th>Grid</th><th>Pts</th></tr>";
        var line = "odd";
        var max = Math.min(offset + limit, results.length);
        for(var i=offset; i<max ; i++) {
          var position = results[i].position;
          var driver = results[i].Driver.givenName + " " + results[i].Driver.familyName;
          var durl = results[i].Driver.url;
          var constructor = results[i].Constructor.name;
          var curl = results[i].Constructor.url;
          var grid = results[i].grid;
          var points = results[i].points;
          list += "<tr class=\"" + line + "\"><td class=\"centred\">" + position + "</td><td><a href=\"" + durl + "\" target=\"_blank\">" + driver + "</a></td><td><a href=\"" + curl + "\" target=\"_blank\">" + constructor + "</a></td><td class=\"centred\">" + grid + "</td><td class=\"centred\">" + points + "</td></tr>";
          if(line == "odd") { line = "even"; } else { line = "odd"; }
        }
        list += "</table>";
        document.getElementById(selectedTabId).innerHTML = list;
        updateFooter(results.length);
      }
    }
  }

  function drawSelector(year, round) {
    if(year != "current") {
      if(round == "last") round = lastRounds[year];
      var races = schedules[year];
      if(races != null && round != null) {
        var races = schedules[year];
        if(races != null) {
          var race = races[round - 1]
          if(race != null) { 
            var selector = "<table id=\"selector\" class=\"selector\"><tr><td rowspan=\"2\" width=\"15\">";
            if(round != 1 || year != firstYear) {
              selector += "<img src=\"http://ergast.googlecode.com/svn/trunk/gadget/left.png\" style=\"cursor: pointer\" onClick=\"javascript:previous()\" title=\"Previous Round\" alt=\"Left\" />";
            }
            selector += "</td><td rowspan=\"2\" width=\"20\">";
            if(year != firstYear) {
              selector += "<img src=\"http://ergast.googlecode.com/svn/trunk/gadget/wideLeft.png\" style=\"cursor: pointer\" onClick=\"javascript:previousYear()\" title=\"Previous Season\" alt=\"Left\" />";
            }
            selector += "</td><td class=\"race\"><a href=\"" + race.url + "\" target=\"_blank\" title=\"Race Report\">" + race.season + " " +  race.raceName + "</a></td>";
            selector += "<td rowspan=\"2\" width=\"20\">";
            if(year != currentYear) {
              selector += "<img src=\"http://ergast.googlecode.com/svn/trunk/gadget/wideRight.png\" onClick=\"javascript:nextYear()\" title=\"Next Season\" alt=\"Right\" />";
            }
            selector += "</td><td rowspan=\"2\" width=\"15\">";
            if(round != lastRounds[year] || year != currentYear) {
              selector += "<img src=\"http://ergast.googlecode.com/svn/trunk/gadget/right.png\" onClick=\"javascript:next()\" title=\"Next Race\" alt=\"Right\" />";
            }
            selector += "</td></tr>";
            selector += "<tr></td><td class=\"round\">Round " + round + " of " + numRounds[year] + "</td>";
            selector += "</tr>";
            selector += "</table>";
            document.getElementById("selector").innerHTML = selector;
            return;
          }
        }   else {
           document.getElementById("selector").innerHTML = "races is null!";	      
        }
      }    else {
        document.getElementById("selector").innerHTML = "races or round is null!";	      
      }
    }
  }

  function updateFooter(max) {
    if(offset + limit < max) {
      document.getElementById("down").innerHTML = "<img src=\"http://ergast.googlecode.com/svn/trunk/gadget/down.png\" style=\"cursor: pointer\" onClick=\"javascript:pageDown()\" title=\"Page Down\" alt=\"Down\" />";
    } else {
      document.getElementById("down").innerHTML = "";
    }
    drawNext();
    if(offset > 0) {
      document.getElementById("up").innerHTML = "<img src=\"http://ergast.googlecode.com/svn/trunk/gadget/up.png\" style=\"cursor: pointer\" onClick=\"javascript:pageUp()\" title=\"Page Up\" alt=\"Up\" />";
    } else {
      document.getElementById("up").innerHTML = "";
    }
    gadgets.window.adjustHeight();
  }

  function drawNext() {
    if(nextRace != null) {
      document.getElementById("next").innerHTML = "<b>Next Race: </b><a href=\"" + nextRace.url + "\" target=\"_blank\" title=\"Race Preview\">" +  nextRace.raceName + "</a> (" + formatDate(nextRace.date) + ")";
    }
  }

  function previous() {
    if(round != "last") {
      if(round == 1) {
        if(year != firstYear) {
          year--;
          round = lastRounds[year];      
          if(round == null) round = "last"; 
        }
      } else {
        round--;
      }
      offset = 0;
      redraw();
    }
  }
  
  function previousYear() {
    if(year != firstYear) {
      year--;
      round = lastRounds[year];      
      if(round == null) round = "last"; 
      offset = 0;
      redraw();
    }
  }
  
  function next() {
    if(round != "last") {
      if(round == lastRounds[year]) {
        if(year != currentYear) {
          year++;
          round = 1;
        }
      } else {
        round++;
      }
      offset = 0;
      redraw();
    }
  } 
  
  function nextYear() {
    if(year != "current" && year != currentYear) {
      year++;
      round = lastRounds[year];
      if(round == null) round = "last"; 
      offset = 0;
      redraw();
    }
  }

  function pageDown() {
    offset += limit;
    redraw();
  }

  function pageUp() {
    offset -= limit;
    redraw();
  }

  function showLoading() {
    document.getElementById(selectedTabId).innerHTML = "<i>Loading...</i>";
    document.getElementById("down").innerHTML = "";
    document.getElementById("up").innerHTML = "";
    document.getElementById("next").innerHTML = "";
  }

  function formatDate(date) {
    var nextMonth = date.slice(5, 7);
    var nextDay = date.slice(8, 10);
    return nextDay + "&nbsp;" + getMonth(nextMonth);
  }
  
  function getMonth(index) {
    switch(index) {
      case "01":
        return "Jan";
      case "02":
        return "Feb";
      case "03":
        return "Mar";
      case "04":
        return "Apr";
      case "05":
        return "May";
      case "06":
        return "Jun";
      case "07":
        return "Jul";
      case "08":
        return "Aug";
      case "09":
        return "Sep";
      case "10":
        return "Oct";
      case "11":
        return "Nov";
      case "12":
        return "Dec";
      default:
        return "";
    }
  }
</script>

<div id="selector"></div>
<div id="tabs"></div>
<div id="dsTabId" style="display:none">Content for DS tab.</div>
<div id="csTabId" style="display:none">Content for CS tab.</div>
<div id="rrTabId" style="display:none">Content for RR tab.</div>
<div id="footer">
  <table class="footer">
    <tr>
      <td id="down" height="10" width="37"></td>
      <td id="next" style="text-align: center"></td>
      <td id="up"  height="10" width="37"></td>
    </tr>
  </table>
</div>
]]></Content> 
</Module>